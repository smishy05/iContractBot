/*
 * generated by Xtext 2.22.0
 */
package org.sctest.scdsl.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.sctest.scdsl.ide.contentassist.antlr.internal.InternalSCDslParser;
import org.sctest.scdsl.services.SCDslGrammarAccess;

public class SCDslParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(SCDslGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, SCDslGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getElementAccess().getAlternatives_0(), "rule__Element__Alternatives_0");
			builder.put(grammarAccess.getRelationshipAccess().getAlternatives_1(), "rule__Relationship__Alternatives_1");
			builder.put(grammarAccess.getTargetPlatformAccess().getAlternatives(), "rule__TargetPlatform__Alternatives");
			builder.put(grammarAccess.getParTypeAccess().getAlternatives(), "rule__ParType__Alternatives");
			builder.put(grammarAccess.getConditionTypesAccess().getAlternatives(), "rule__ConditionTypes__Alternatives");
			builder.put(grammarAccess.getSContractAccess().getGroup(), "rule__SContract__Group__0");
			builder.put(grammarAccess.getElementAccess().getGroup(), "rule__Element__Group__0");
			builder.put(grammarAccess.getCompositeElementAccess().getGroup(), "rule__CompositeElement__Group__0");
			builder.put(grammarAccess.getParticipantAccess().getGroup(), "rule__Participant__Group__0");
			builder.put(grammarAccess.getParticipantAccess().getGroup_2(), "rule__Participant__Group_2__0");
			builder.put(grammarAccess.getAssetAccess().getGroup(), "rule__Asset__Group__0");
			builder.put(grammarAccess.getParameterAccess().getGroup(), "rule__Parameter__Group__0");
			builder.put(grammarAccess.getParameterAccess().getGroup_8(), "rule__Parameter__Group_8__0");
			builder.put(grammarAccess.getTransactionAccess().getGroup(), "rule__Transaction__Group__0");
			builder.put(grammarAccess.getTransactionAccess().getGroup_2(), "rule__Transaction__Group_2__0");
			builder.put(grammarAccess.getConditionAccess().getGroup(), "rule__Condition__Group__0");
			builder.put(grammarAccess.getRelationshipAccess().getGroup(), "rule__Relationship__Group__0");
			builder.put(grammarAccess.getEventAccess().getGroup(), "rule__Event__Group__0");
			builder.put(grammarAccess.getTranRelAccess().getGroup(), "rule__TranRel__Group__0");
			builder.put(grammarAccess.getTranRelAccess().getGroup_2(), "rule__TranRel__Group_2__0");
			builder.put(grammarAccess.getAssetRelAccess().getGroup(), "rule__AssetRel__Group__0");
			builder.put(grammarAccess.getAssetRelAccess().getGroup_2(), "rule__AssetRel__Group_2__0");
			builder.put(grammarAccess.getAssetRelAccess().getGroup_3(), "rule__AssetRel__Group_3__0");
			builder.put(grammarAccess.getAssetRelAccess().getGroup_4(), "rule__AssetRel__Group_4__0");
			builder.put(grammarAccess.getAssetRelAccess().getGroup_5(), "rule__AssetRel__Group_5__0");
			builder.put(grammarAccess.getAssetRelAccess().getGroup_6(), "rule__AssetRel__Group_6__0");
			builder.put(grammarAccess.getSContractAccess().getNameAssignment_2(), "rule__SContract__NameAssignment_2");
			builder.put(grammarAccess.getSContractAccess().getPlatformAssignment_5(), "rule__SContract__PlatformAssignment_5");
			builder.put(grammarAccess.getSContractAccess().getElementAssignment_6(), "rule__SContract__ElementAssignment_6");
			builder.put(grammarAccess.getElementAccess().getNameAssignment_4(), "rule__Element__NameAssignment_4");
			builder.put(grammarAccess.getElementAccess().getListAssignment_7(), "rule__Element__ListAssignment_7");
			builder.put(grammarAccess.getElementAccess().getRelationshipAssignment_8(), "rule__Element__RelationshipAssignment_8");
			builder.put(grammarAccess.getElementAccess().getCompositeelementAssignment_9(), "rule__Element__CompositeelementAssignment_9");
			builder.put(grammarAccess.getElementAccess().getParametersAssignment_10(), "rule__Element__ParametersAssignment_10");
			builder.put(grammarAccess.getCompositeElementAccess().getNameAssignment_2(), "rule__CompositeElement__NameAssignment_2");
			builder.put(grammarAccess.getCompositeElementAccess().getListAssignment_5(), "rule__CompositeElement__ListAssignment_5");
			builder.put(grammarAccess.getParticipantAccess().getCreatorAssignment_2_2(), "rule__Participant__CreatorAssignment_2_2");
			builder.put(grammarAccess.getAssetAccess().getTypeAssignment_3(), "rule__Asset__TypeAssignment_3");
			builder.put(grammarAccess.getParameterAccess().getNameAssignment_4(), "rule__Parameter__NameAssignment_4");
			builder.put(grammarAccess.getParameterAccess().getTypeAssignment_7(), "rule__Parameter__TypeAssignment_7");
			builder.put(grammarAccess.getParameterAccess().getIdentifierAssignment_8_2(), "rule__Parameter__IdentifierAssignment_8_2");
			builder.put(grammarAccess.getTransactionAccess().getMostrarAssignment_2_2(), "rule__Transaction__MostrarAssignment_2_2");
			builder.put(grammarAccess.getTransactionAccess().getConditionAssignment_4(), "rule__Transaction__ConditionAssignment_4");
			builder.put(grammarAccess.getConditionAccess().getNameAssignment_4(), "rule__Condition__NameAssignment_4");
			builder.put(grammarAccess.getConditionAccess().getConditionAssignment_7(), "rule__Condition__ConditionAssignment_7");
			builder.put(grammarAccess.getConditionAccess().getConditionTypeAssignment_10(), "rule__Condition__ConditionTypeAssignment_10");
			builder.put(grammarAccess.getRelationshipAccess().getNameAssignment_5(), "rule__Relationship__NameAssignment_5");
			builder.put(grammarAccess.getRelationshipAccess().getFromAssignment_8(), "rule__Relationship__FromAssignment_8");
			builder.put(grammarAccess.getRelationshipAccess().getToAssignment_11(), "rule__Relationship__ToAssignment_11");
			builder.put(grammarAccess.getRelationshipAccess().getEventAssignment_12(), "rule__Relationship__EventAssignment_12");
			builder.put(grammarAccess.getEventAccess().getDescriptionAssignment_4(), "rule__Event__DescriptionAssignment_4");
			builder.put(grammarAccess.getEventAccess().getNameAssignment_7(), "rule__Event__NameAssignment_7");
			builder.put(grammarAccess.getTranRelAccess().getSelectedAssignment_2_2(), "rule__TranRel__SelectedAssignment_2_2");
			builder.put(grammarAccess.getAssetRelAccess().getCreateAssignment_2_2(), "rule__AssetRel__CreateAssignment_2_2");
			builder.put(grammarAccess.getAssetRelAccess().getReadAssignment_3_2(), "rule__AssetRel__ReadAssignment_3_2");
			builder.put(grammarAccess.getAssetRelAccess().getUpdateAssignment_4_2(), "rule__AssetRel__UpdateAssignment_4_2");
			builder.put(grammarAccess.getAssetRelAccess().getDeleteAssignment_5_2(), "rule__AssetRel__DeleteAssignment_5_2");
			builder.put(grammarAccess.getAssetRelAccess().getAllAssignment_6_2(), "rule__AssetRel__AllAssignment_6_2");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private SCDslGrammarAccess grammarAccess;

	@Override
	protected InternalSCDslParser createParser() {
		InternalSCDslParser result = new InternalSCDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public SCDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(SCDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
