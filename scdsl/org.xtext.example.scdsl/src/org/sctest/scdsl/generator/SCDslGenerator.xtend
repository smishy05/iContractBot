/*
 * generated by Xtext 2.22.0
 * «»
 */
package org.sctest.scdsl.generator

import java.lang.Object
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.sctest.scdsl.sCDsl.SContract
import org.sctest.scdsl.sCDsl.Participant
import org.sctest.scdsl.sCDsl.Asset
import org.sctest.scdsl.sCDsl.Transaction
import org.sctest.scdsl.sCDsl.TranRel
import org.sctest.scdsl.sCDsl.AssetRel
import org.sctest.scdsl.sCDsl.Relationship

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class SCDslGenerator extends AbstractGenerator {
	
	String participant = "";
	String asset = "";
	String transaction = "";
	String tranrel = "";
	String assetrel = "";
	String conditions = "";
	String rel = "";
	String modifiername = "";
	
	String applicationroles = "";
	String workflows = "";
	String constructor = "";
	String functions = "";
	String azureProperties = "\"Properties\":" + "\n" + "{" + "\"Name\": \"State\"" + ",\n" + "\"DisplayName\": \"State\"" + ",\n" + "\"Description\": \"Holds the state of the contract.\"" + ",\n" + "\"Type\": {\n" + "\"Name\": \"state\"" + "\n" + "}" + "\n" + "}," + "\n";

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		for (s : resource.allContents.filter(SContract).toIterable) {
			// This is Hyperledger Composer
			//----------------------------------------------------------------------------------------------
			if(s.platform.toString() == "IBM"){
				//----------------------------------------------------------------------------------------------
				// The element is an asset
				for (a : resource.allContents.filter(Asset).toIterable)
				{
					// Find the identifier for the asset
					for (par : a.parameters)
					{
						if(par.identifier == true){
							asset = asset + "asset " + a.name.substring(0, 1).toUpperCase() + a.name.substring(1) + " identified by " + par.name + " {\n" 
						}	
					}
					// Then, put all the parameters of the asset
					for (par : a.parameters)
					{
						asset = asset + "o " + 	par.type.substring(0, 1).toUpperCase() + par.type.substring(1) + " " + par.name + "\n"
					}
					asset = asset + "}\n"
				}
				//----------------------------------------------------------------------------------------------
				
				//----------------------------------------------------------------------------------------------
				// The element is a participant. We are iterating over all the participants
				for (p : resource.allContents.filter(Participant).toIterable)
				{
					// Find the identifier for the participant first
					for (par : p.parameters)
					{
						if(par.identifier == true)
						{
							participant = participant + "participant " + p.name.substring(0, 1).toUpperCase() + p.name.substring(1) + " identified by " + par.name 
							+ "{\n"
						}
					}
					
					// Then, put all the parameters of the participant
					for (par : p.parameters)
					{
						participant = participant + "o " + par.type.substring(0, 1).toUpperCase() + par.type.substring(1) + " " + par.name + "\n"
					}
					participant = participant + "}\n"
				}
				//----------------------------------------------------------------------------------------------
				
				//----------------------------------------------------------------------------------------------
				// The element is a transaction
				for (t : resource.allContents.filter(Transaction).toIterable)
				{
					transaction = transaction + "transaction " + t.name.substring(0, 1).toUpperCase() + t.name.substring(1) + " {\n"
					for (r: t.relationship)
					{
						if(r.to.name.toString() == t.name)
						{
							transaction = transaction + "--> " + r.from.name.substring(0, 1).toUpperCase() + r.from.name.toString().substring(1) + " " 
						+ r.from.name.toLowerCase() + "\n"
						}
						if(r.from.name.toString() == t.name)
						{
							transaction = transaction + "--> " + r.to.name.substring(0, 1).toUpperCase() + r.to.name.substring(1) + " " 
							+ r.to.name.toLowerCase() + "\n"
						}
					}
					transaction = transaction + "}\n";
				}
				// Call the function for writing to the file
				fsa.generateFile(s.name+'.cto', generateCodeIBM(s))
			}
			
			// If the language is Solidity or Azure
			else
			{
				//----------------------------------------------------------------------------------------------
				// The language is Azure
				if(s.platform.toString() == "Azure"){
					
					//----------------------------------------------------------------------------------------------
					// The element is a participant. We will iterate over all the participants.
					for(p : resource.allContents.filter(Participant).toIterable)
					{
						applicationroles = applicationroles + "{ \n" + "\"Name\": " + "\"" + p.name.substring(0, 1).toUpperCase() + p.name.substring(1) + "\""
						+ "\n" + "\"Description\": \"...\"" + "\n},\n" 
					}
					for(arel : resource.allContents.filter(AssetRel).toIterable)
					{
						for(a: resource.allContents.filter(Asset).toIterable)
						{
							if (a.name == arel.to.name.toString())
							{
								for(par: a.parameters)
								{
									workflows = workflows + "{" + "\n" "\"Name\": " + "\"" + par.name + "\"" + "\n" + "\"DisplayName\": " + "\"" + par.name + "\"" + "\n" + "\"Description\": \"...\"" + "\n"
									workflows = workflows + "Initiator: ["
									for(trel : resource.allContents.filter(TranRel).toIterable)
									{
										if(trel.to.name.toString() == arel.from.name.toString())
										{
											workflows = workflows + trel.from.name.toString() + ", "
										}
									}
									workflows = workflows + "]," + "\n"
									workflows = workflows + "\"StartState\": \"\"" + ",\n"
									workflows = workflows + azureProperties
									workflows = workflows + "{\n" + "\"Name\": \"" + par.name + "\",\n" + "\"DisplayName\": \"" + par.name + "\",\n" + "\"Description\": \"...\",\n" + "\"Type\": {\n" + "\"Name\": \"" + par.type + "\"" + "\n}" + "\n}"
								}
							}
							
						}
						
						for(a : resource.allContents.filter(Asset).toIterable)
						{
							
						}
					}
					
					for(arel : resource.allContents.filter(AssetRel).toIterable)
					{
						for(a : resource.allContents.filter(Asset).toIterable)
						{
							if(arel.to.name.toString() == a.name)
							{
								for (par: a.parameters)
								{
									
                						constructor = constructor + "{\n" + "\"Name\": \"" + par.name + "\",\n" + "\"DisplayName\": \"" + par.name + "\",\n" + "\"Description\": \"...\",\n" + "\"Type\": {\n" + "\"Name\": \"" + par.type + "\"" + "\n}" + "\n}," 
									
								}
							}		
						}
					}
					
					for(arel : resource.allContents.filter(AssetRel).toIterable)
					{
						functions = functions + "{ \n" +  "\"Name\": \"" + arel.name + "\", \n" + "\"DisplayName\":	\"" + arel.name + "\",\n" + "\"Description\": \"...\",\n" + "\"Parameters\": ['[]'/]\n" + "}\n"
					}
					
					fsa.generateFile(s.name+'.json', generateCodeAzure(s))
				}
				//----------------------------------------------------------------------------------------------
				
				//----------------------------------------------------------------------------------------------
				// The language is Solidity
				else
				{
					// The element is Participant. Iterate over all of them
					// The participant are struct datatypes
					
					for (p : resource.allContents.filter(Participant).toIterable)
					{
						participant = participant + "struct " + 
						p.name.substring(0, 1).toUpperCase() + p.name.substring(1) + '{\n'
						
						for (par : p.parameters)
						{
							if(par.type.toLowerCase() == 'string')
							{
								participant = participant + "bytes32 " + par.name + ";\n"
							}
							else
							{
								participant = participant + par.type + " " + par.name + ";\n"
							}
						}
						participant = participant + "address " + p.name.toLowerCase() + "Address;\n } \n"
					}
					
					// Only the parameters of the assets is put into the smart contract
					
					for (a : resource.allContents.filter(Asset).toIterable)
					{
						asset = asset + "struct " + a.name.substring(0, 1).toUpperCase() + 
						a.name.substring(1) + '{\n'
						for (ass : a.parameters)
						{
							if(ass.type.toLowerCase() == 'string')
							{
								asset = asset + "bytes32 " + ass.name + ";\n"
							}
							else
							{
								asset = asset + ass.type + " " + ass.name + ";\n"
							}
						}
						asset = asset + "\n } \n"
					}
					
					// Make events for the asset relationships using the AssetRel
					for(arel: resource.allContents.filter(AssetRel).toIterable)
					{
						assetrel = assetrel + "event " + arel.name + "(" + arel.from.name.toString() + " " + "var);\n"
					}
					
					// Defining the function modifiers using the TranRel
					for (trel : resource.allContents.filter(TranRel).toIterable)
					{
						tranrel = "modifier only" + trel.from.name.toString().substring(0, 1).toUpperCase() + trel.from.name.toString().substring(1) + " {\n" + "require( msg.sender == " + trel.from.name.toString() 
						+ "." + trel.from.name.toString() + "Address);\n_;\n}" 
					}
					
					for (tr : resource.allContents.filter(Transaction).toIterable)
					{
						transaction = transaction + "function " + tr.name + "() ";
						modifiername = ""
						
						for (trel : resource.allContents.filter(TranRel).toIterable)
						{
							if (trel.to == tr.name)
								modifiername = modifiername + "only" + trel.name
						}
						transaction = transaction + modifiername + " public { \n"
						
						conditions = ""
						for (co : tr.condition)
						{
							if(co.conditionType.toString() == "Pre")
							{
								conditions = conditions + "require (" + co.condition + "); \n" 
							}
						}
						
						transaction = transaction + conditions + "} \n"
					}
					
					fsa.generateFile(s.name+'.sol', generateCodeSolidity(s))
				}
			}
		}
	}
	
	private def generateCodeIBM(SContract s) 
	{
		val elelist = newArrayList (asset, participant, tranrel, transaction);
		'''
		namespace «s.name.replaceAll(" ", "_")»
		«FOR el : elelist»
			«el»
		«ENDFOR»
		'''
	}
	
	private def generateCodeAzure(SContract s)
	{
		val elelist1 = newArrayList (applicationroles);
		val elelist2 = newArrayList (workflows);
		val elelist3 = newArrayList (constructor);
		val elelist4 = newArrayList (functions);
		'''
		{
			"ApplicationName": "«s.name.replaceAll(" ", "")»",
			"DisplayName": "«s.name.replaceAll(" ", "")»",
			"Description": "...",
			"ApplicationRoles": 
			[
				«FOR el1 : elelist1»
					«el1»
				«ENDFOR»
			],
			"Workflows":
			[
				«FOR el2 : elelist2»
					«el2»
				«ENDFOR»
				
			],
			"Constructor":
			{
				"Parameters":
				[
					«FOR el3 : elelist3»
						«el3»
					«ENDFOR»
				]
			},
			"Functions":
			[
				«FOR el4 : elelist4»
					«el4»
				«ENDFOR»
			]
			"States":
			[
				{
					"Name": "",
				    "DisplayName": "",
				    "Description": "...",
				    "PercentComplete": ,
				    "Value": ,
				    "Style": "",
				    "Transitions": ['[]'/]
				}
			]
		}
		'''
	}
	
	private def generateCodeSolidity(SContract s) 
	{
		val elelist = newArrayList (participant, asset, transaction, tranrel);
		'''
		pragma solidity >=0.4.22 <0.7.0;
	
		contract «s.name.replaceAll(" ", "_")»{
			constructor(){
				
			}
			«FOR el : elelist»
				«el»
			«ENDFOR»
		
		}
		'''
	}
}