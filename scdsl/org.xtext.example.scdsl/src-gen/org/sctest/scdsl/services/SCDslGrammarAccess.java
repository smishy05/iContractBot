/*
 * generated by Xtext 2.22.0
 */
package org.sctest.scdsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class SCDslGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class SContractElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sctest.scdsl.SCDsl.SContract");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cContractKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cPlatformKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cPlatformAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cPlatformTargetPlatformEnumRuleCall_5_0 = (RuleCall)cPlatformAssignment_5.eContents().get(0);
		private final Assignment cElementAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cElementElementParserRuleCall_6_0 = (RuleCall)cElementAssignment_6.eContents().get(0);
		
		//SContract:
		//	'Contract' ':' name=ID
		//	'Platform' ':' platform=TargetPlatform
		//	element+=Element*;
		@Override public ParserRule getRule() { return rule; }
		
		//'Contract' ':' name=ID 'Platform' ':' platform=TargetPlatform element+=Element*
		public Group getGroup() { return cGroup; }
		
		//'Contract'
		public Keyword getContractKeyword_0() { return cContractKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'Platform'
		public Keyword getPlatformKeyword_3() { return cPlatformKeyword_3; }
		
		//':'
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }
		
		//platform=TargetPlatform
		public Assignment getPlatformAssignment_5() { return cPlatformAssignment_5; }
		
		//TargetPlatform
		public RuleCall getPlatformTargetPlatformEnumRuleCall_5_0() { return cPlatformTargetPlatformEnumRuleCall_5_0; }
		
		//element+=Element*
		public Assignment getElementAssignment_6() { return cElementAssignment_6; }
		
		//Element
		public RuleCall getElementElementParserRuleCall_6_0() { return cElementElementParserRuleCall_6_0; }
	}
	public class ElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sctest.scdsl.SCDsl.Element");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cParticipantParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cAssetParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cTransactionParserRuleCall_0_2 = (RuleCall)cAlternatives_0.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cNameKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameIDTerminalRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Keyword cListKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cColonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cListAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cListIDTerminalRuleCall_7_0 = (RuleCall)cListAssignment_7.eContents().get(0);
		private final Assignment cRelationshipAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cRelationshipRelationshipParserRuleCall_8_0 = (RuleCall)cRelationshipAssignment_8.eContents().get(0);
		private final Assignment cCompositeelementAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cCompositeelementCompositeElementParserRuleCall_9_0 = (RuleCall)cCompositeelementAssignment_9.eContents().get(0);
		private final Assignment cParametersAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cParametersParameterParserRuleCall_10_0 = (RuleCall)cParametersAssignment_10.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_11 = (Keyword)cGroup.eContents().get(11);
		
		//Element:
		//	(Participant | Asset | Transaction) '{'
		//	'Name' ':' name=ID
		//	'List' ':' list=ID
		//	relationship+=Relationship*
		//	compositeelement+=CompositeElement*
		//	parameters+=Parameter*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//(Participant | Asset | Transaction) '{' 'Name' ':' name=ID 'List' ':' list=ID relationship+=Relationship*
		//compositeelement+=CompositeElement* parameters+=Parameter* '}'
		public Group getGroup() { return cGroup; }
		
		//(Participant | Asset | Transaction)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//Participant
		public RuleCall getParticipantParserRuleCall_0_0() { return cParticipantParserRuleCall_0_0; }
		
		//Asset
		public RuleCall getAssetParserRuleCall_0_1() { return cAssetParserRuleCall_0_1; }
		
		//Transaction
		public RuleCall getTransactionParserRuleCall_0_2() { return cTransactionParserRuleCall_0_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'Name'
		public Keyword getNameKeyword_2() { return cNameKeyword_2; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//name=ID
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_4_0() { return cNameIDTerminalRuleCall_4_0; }
		
		//'List'
		public Keyword getListKeyword_5() { return cListKeyword_5; }
		
		//':'
		public Keyword getColonKeyword_6() { return cColonKeyword_6; }
		
		//list=ID
		public Assignment getListAssignment_7() { return cListAssignment_7; }
		
		//ID
		public RuleCall getListIDTerminalRuleCall_7_0() { return cListIDTerminalRuleCall_7_0; }
		
		//relationship+=Relationship*
		public Assignment getRelationshipAssignment_8() { return cRelationshipAssignment_8; }
		
		//Relationship
		public RuleCall getRelationshipRelationshipParserRuleCall_8_0() { return cRelationshipRelationshipParserRuleCall_8_0; }
		
		//compositeelement+=CompositeElement*
		public Assignment getCompositeelementAssignment_9() { return cCompositeelementAssignment_9; }
		
		//CompositeElement
		public RuleCall getCompositeelementCompositeElementParserRuleCall_9_0() { return cCompositeelementCompositeElementParserRuleCall_9_0; }
		
		//parameters+=Parameter*
		public Assignment getParametersAssignment_10() { return cParametersAssignment_10; }
		
		//Parameter
		public RuleCall getParametersParameterParserRuleCall_10_0() { return cParametersParameterParserRuleCall_10_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_11() { return cRightCurlyBracketKeyword_11; }
	}
	public class CompositeElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sctest.scdsl.SCDsl.CompositeElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNameKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cListKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cListAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cListIDTerminalRuleCall_5_0 = (RuleCall)cListAssignment_5.eContents().get(0);
		
		//CompositeElement:
		//	'Name' ':' name=ID
		//	'List' ':' list=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'Name' ':' name=ID 'List' ':' list=ID
		public Group getGroup() { return cGroup; }
		
		//'Name'
		public Keyword getNameKeyword_0() { return cNameKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'List'
		public Keyword getListKeyword_3() { return cListKeyword_3; }
		
		//':'
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }
		
		//list=ID
		public Assignment getListAssignment_5() { return cListAssignment_5; }
		
		//ID
		public RuleCall getListIDTerminalRuleCall_5_0() { return cListIDTerminalRuleCall_5_0; }
	}
	public class ParticipantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sctest.scdsl.SCDsl.Participant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParticipantAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cParticipantKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCreatorKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cColonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cCreatorAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final Keyword cCreatorTKeyword_2_2_0 = (Keyword)cCreatorAssignment_2_2.eContents().get(0);
		
		//Participant:
		//	{Participant} 'Participant' ('Creator' ':' creator?='T')?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Participant} 'Participant' ('Creator' ':' creator?='T')?
		public Group getGroup() { return cGroup; }
		
		//{Participant}
		public Action getParticipantAction_0() { return cParticipantAction_0; }
		
		//'Participant'
		public Keyword getParticipantKeyword_1() { return cParticipantKeyword_1; }
		
		//('Creator' ':' creator?='T')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'Creator'
		public Keyword getCreatorKeyword_2_0() { return cCreatorKeyword_2_0; }
		
		//':'
		public Keyword getColonKeyword_2_1() { return cColonKeyword_2_1; }
		
		//creator?='T'
		public Assignment getCreatorAssignment_2_2() { return cCreatorAssignment_2_2; }
		
		//'T'
		public Keyword getCreatorTKeyword_2_2_0() { return cCreatorTKeyword_2_2_0; }
	}
	public class AssetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sctest.scdsl.SCDsl.Asset");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAssetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cTypeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeIDTerminalRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		
		//Asset:
		//	'Asset'
		//	'Type' ':' type=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'Asset' 'Type' ':' type=ID
		public Group getGroup() { return cGroup; }
		
		//'Asset'
		public Keyword getAssetKeyword_0() { return cAssetKeyword_0; }
		
		//'Type'
		public Keyword getTypeKeyword_1() { return cTypeKeyword_1; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//type=ID
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//ID
		public RuleCall getTypeIDTerminalRuleCall_3_0() { return cTypeIDTerminalRuleCall_3_0; }
	}
	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sctest.scdsl.SCDsl.Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cParameterKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cNameKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameIDTerminalRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Keyword cTypeKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cColonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cTypeAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cTypeIDTerminalRuleCall_7_0 = (RuleCall)cTypeAssignment_7.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cIdentifierKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Keyword cColonKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Assignment cIdentifierAssignment_8_2 = (Assignment)cGroup_8.eContents().get(2);
		private final Keyword cIdentifierTKeyword_8_2_0 = (Keyword)cIdentifierAssignment_8_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//Parameter:
		//	'Parameter' '{'
		//	'Name' ':' name=ID
		//	'Type' ':' type=ID ('Identifier' ':' identifier?='T')?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Parameter' '{' 'Name' ':' name=ID 'Type' ':' type=ID ('Identifier' ':' identifier?='T')? '}'
		public Group getGroup() { return cGroup; }
		
		//'Parameter'
		public Keyword getParameterKeyword_0() { return cParameterKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'Name'
		public Keyword getNameKeyword_2() { return cNameKeyword_2; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//name=ID
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_4_0() { return cNameIDTerminalRuleCall_4_0; }
		
		//'Type'
		public Keyword getTypeKeyword_5() { return cTypeKeyword_5; }
		
		//':'
		public Keyword getColonKeyword_6() { return cColonKeyword_6; }
		
		//type=ID
		public Assignment getTypeAssignment_7() { return cTypeAssignment_7; }
		
		//ID
		public RuleCall getTypeIDTerminalRuleCall_7_0() { return cTypeIDTerminalRuleCall_7_0; }
		
		//('Identifier' ':' identifier?='T')?
		public Group getGroup_8() { return cGroup_8; }
		
		//'Identifier'
		public Keyword getIdentifierKeyword_8_0() { return cIdentifierKeyword_8_0; }
		
		//':'
		public Keyword getColonKeyword_8_1() { return cColonKeyword_8_1; }
		
		//identifier?='T'
		public Assignment getIdentifierAssignment_8_2() { return cIdentifierAssignment_8_2; }
		
		//'T'
		public Keyword getIdentifierTKeyword_8_2_0() { return cIdentifierTKeyword_8_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}
	public class TransactionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sctest.scdsl.SCDsl.Transaction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTransactionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTransactionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cMostrarKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cColonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cMostrarAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final Keyword cMostrarTKeyword_2_2_0 = (Keyword)cMostrarAssignment_2_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cConditionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cConditionConditionParserRuleCall_4_0 = (RuleCall)cConditionAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Transaction:
		//	{Transaction} 'Transaction' ('Mostrar' ':' mostrar?='T')? '{'
		//	condition+=Condition*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Transaction} 'Transaction' ('Mostrar' ':' mostrar?='T')? '{' condition+=Condition* '}'
		public Group getGroup() { return cGroup; }
		
		//{Transaction}
		public Action getTransactionAction_0() { return cTransactionAction_0; }
		
		//'Transaction'
		public Keyword getTransactionKeyword_1() { return cTransactionKeyword_1; }
		
		//('Mostrar' ':' mostrar?='T')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'Mostrar'
		public Keyword getMostrarKeyword_2_0() { return cMostrarKeyword_2_0; }
		
		//':'
		public Keyword getColonKeyword_2_1() { return cColonKeyword_2_1; }
		
		//mostrar?='T'
		public Assignment getMostrarAssignment_2_2() { return cMostrarAssignment_2_2; }
		
		//'T'
		public Keyword getMostrarTKeyword_2_2_0() { return cMostrarTKeyword_2_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//condition+=Condition*
		public Assignment getConditionAssignment_4() { return cConditionAssignment_4; }
		
		//Condition
		public RuleCall getConditionConditionParserRuleCall_4_0() { return cConditionConditionParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sctest.scdsl.SCDsl.Condition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConditionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cNameKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameIDTerminalRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Keyword cConditionKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cColonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cConditionAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cConditionIDTerminalRuleCall_7_0 = (RuleCall)cConditionAssignment_7.eContents().get(0);
		private final Keyword cConditionTypeKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cColonKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cConditionTypeAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cConditionTypeConditionTypesEnumRuleCall_10_0 = (RuleCall)cConditionTypeAssignment_10.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_11 = (Keyword)cGroup.eContents().get(11);
		
		//Condition:
		//	'Condition' '{'
		//	'Name' ':' name=ID
		//	'Condition' ':' condition=ID
		//	'ConditionType' ':' conditionType=ConditionTypes
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Condition' '{' 'Name' ':' name=ID 'Condition' ':' condition=ID 'ConditionType' ':' conditionType=ConditionTypes '}'
		public Group getGroup() { return cGroup; }
		
		//'Condition'
		public Keyword getConditionKeyword_0() { return cConditionKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'Name'
		public Keyword getNameKeyword_2() { return cNameKeyword_2; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//name=ID
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_4_0() { return cNameIDTerminalRuleCall_4_0; }
		
		//'Condition'
		public Keyword getConditionKeyword_5() { return cConditionKeyword_5; }
		
		//':'
		public Keyword getColonKeyword_6() { return cColonKeyword_6; }
		
		//condition=ID
		public Assignment getConditionAssignment_7() { return cConditionAssignment_7; }
		
		//ID
		public RuleCall getConditionIDTerminalRuleCall_7_0() { return cConditionIDTerminalRuleCall_7_0; }
		
		//'ConditionType'
		public Keyword getConditionTypeKeyword_8() { return cConditionTypeKeyword_8; }
		
		//':'
		public Keyword getColonKeyword_9() { return cColonKeyword_9; }
		
		//conditionType=ConditionTypes
		public Assignment getConditionTypeAssignment_10() { return cConditionTypeAssignment_10; }
		
		//ConditionTypes
		public RuleCall getConditionTypeConditionTypesEnumRuleCall_10_0() { return cConditionTypeConditionTypesEnumRuleCall_10_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_11() { return cRightCurlyBracketKeyword_11; }
	}
	public class RelationshipElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sctest.scdsl.SCDsl.Relationship");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRelationshipKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cTranRelParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cAssetRelParserRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cNameKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cNameAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cNameIDTerminalRuleCall_5_0 = (RuleCall)cNameAssignment_5.eContents().get(0);
		private final Keyword cFromKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cColonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cFromAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final CrossReference cFromElementCrossReference_8_0 = (CrossReference)cFromAssignment_8.eContents().get(0);
		private final RuleCall cFromElementIDTerminalRuleCall_8_0_1 = (RuleCall)cFromElementCrossReference_8_0.eContents().get(1);
		private final Keyword cToKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cColonKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cToAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final CrossReference cToElementCrossReference_11_0 = (CrossReference)cToAssignment_11.eContents().get(0);
		private final RuleCall cToElementIDTerminalRuleCall_11_0_1 = (RuleCall)cToElementCrossReference_11_0.eContents().get(1);
		private final Assignment cEventAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cEventEventParserRuleCall_12_0 = (RuleCall)cEventAssignment_12.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_13 = (Keyword)cGroup.eContents().get(13);
		
		//Relationship:
		//	'Relationship' (TranRel | AssetRel) '{'
		//	'Name' ':' name=ID
		//	'From' ':' from=[Element]
		//	'To' ':' to=[Element] event+=Event*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Relationship' (TranRel | AssetRel) '{' 'Name' ':' name=ID 'From' ':' from=[Element] 'To' ':' to=[Element] event+=Event*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Relationship'
		public Keyword getRelationshipKeyword_0() { return cRelationshipKeyword_0; }
		
		//(TranRel | AssetRel)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//TranRel
		public RuleCall getTranRelParserRuleCall_1_0() { return cTranRelParserRuleCall_1_0; }
		
		//AssetRel
		public RuleCall getAssetRelParserRuleCall_1_1() { return cAssetRelParserRuleCall_1_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'Name'
		public Keyword getNameKeyword_3() { return cNameKeyword_3; }
		
		//':'
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }
		
		//name=ID
		public Assignment getNameAssignment_5() { return cNameAssignment_5; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_5_0() { return cNameIDTerminalRuleCall_5_0; }
		
		//'From'
		public Keyword getFromKeyword_6() { return cFromKeyword_6; }
		
		//':'
		public Keyword getColonKeyword_7() { return cColonKeyword_7; }
		
		//from=[Element]
		public Assignment getFromAssignment_8() { return cFromAssignment_8; }
		
		//[Element]
		public CrossReference getFromElementCrossReference_8_0() { return cFromElementCrossReference_8_0; }
		
		//ID
		public RuleCall getFromElementIDTerminalRuleCall_8_0_1() { return cFromElementIDTerminalRuleCall_8_0_1; }
		
		//'To'
		public Keyword getToKeyword_9() { return cToKeyword_9; }
		
		//':'
		public Keyword getColonKeyword_10() { return cColonKeyword_10; }
		
		//to=[Element]
		public Assignment getToAssignment_11() { return cToAssignment_11; }
		
		//[Element]
		public CrossReference getToElementCrossReference_11_0() { return cToElementCrossReference_11_0; }
		
		//ID
		public RuleCall getToElementIDTerminalRuleCall_11_0_1() { return cToElementIDTerminalRuleCall_11_0_1; }
		
		//event+=Event*
		public Assignment getEventAssignment_12() { return cEventAssignment_12; }
		
		//Event
		public RuleCall getEventEventParserRuleCall_12_0() { return cEventEventParserRuleCall_12_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_13() { return cRightCurlyBracketKeyword_13; }
	}
	public class EventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sctest.scdsl.SCDsl.Event");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEventKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cDescriptionKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cDescriptionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDescriptionIDTerminalRuleCall_4_0 = (RuleCall)cDescriptionAssignment_4.eContents().get(0);
		private final Keyword cNameKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cColonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cNameAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cNameIDTerminalRuleCall_7_0 = (RuleCall)cNameAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Event:
		//	'Event' '{'
		//	'Description' ':' description=ID
		//	'Name' ':' name=ID
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Event' '{' 'Description' ':' description=ID 'Name' ':' name=ID '}'
		public Group getGroup() { return cGroup; }
		
		//'Event'
		public Keyword getEventKeyword_0() { return cEventKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'Description'
		public Keyword getDescriptionKeyword_2() { return cDescriptionKeyword_2; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//description=ID
		public Assignment getDescriptionAssignment_4() { return cDescriptionAssignment_4; }
		
		//ID
		public RuleCall getDescriptionIDTerminalRuleCall_4_0() { return cDescriptionIDTerminalRuleCall_4_0; }
		
		//'Name'
		public Keyword getNameKeyword_5() { return cNameKeyword_5; }
		
		//':'
		public Keyword getColonKeyword_6() { return cColonKeyword_6; }
		
		//name=ID
		public Assignment getNameAssignment_7() { return cNameAssignment_7; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_7_0() { return cNameIDTerminalRuleCall_7_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class TranRelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sctest.scdsl.SCDsl.TranRel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTranRelAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTranRelKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cSelectedKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cColonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cSelectedAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final Keyword cSelectedTKeyword_2_2_0 = (Keyword)cSelectedAssignment_2_2.eContents().get(0);
		
		//TranRel:
		//	{TranRel} 'TranRel' ('Selected' ':' selected?='T')?;
		@Override public ParserRule getRule() { return rule; }
		
		//{TranRel} 'TranRel' ('Selected' ':' selected?='T')?
		public Group getGroup() { return cGroup; }
		
		//{TranRel}
		public Action getTranRelAction_0() { return cTranRelAction_0; }
		
		//'TranRel'
		public Keyword getTranRelKeyword_1() { return cTranRelKeyword_1; }
		
		//('Selected' ':' selected?='T')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'Selected'
		public Keyword getSelectedKeyword_2_0() { return cSelectedKeyword_2_0; }
		
		//':'
		public Keyword getColonKeyword_2_1() { return cColonKeyword_2_1; }
		
		//selected?='T'
		public Assignment getSelectedAssignment_2_2() { return cSelectedAssignment_2_2; }
		
		//'T'
		public Keyword getSelectedTKeyword_2_2_0() { return cSelectedTKeyword_2_2_0; }
	}
	public class AssetRelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sctest.scdsl.SCDsl.AssetRel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAssetRelAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAssetRelKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCreateKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cColonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cCreateAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final Keyword cCreateTKeyword_2_2_0 = (Keyword)cCreateAssignment_2_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cReadKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cColonKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cReadAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final Keyword cReadTKeyword_3_2_0 = (Keyword)cReadAssignment_3_2.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cUpdateKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cColonKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cUpdateAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final Keyword cUpdateTKeyword_4_2_0 = (Keyword)cUpdateAssignment_4_2.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cDeleteKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cColonKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cDeleteAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final Keyword cDeleteTKeyword_5_2_0 = (Keyword)cDeleteAssignment_5_2.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cAllKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cColonKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cAllAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final Keyword cAllTKeyword_6_2_0 = (Keyword)cAllAssignment_6_2.eContents().get(0);
		
		//AssetRel:
		//	{AssetRel} 'AssetRel' ('Create' ':' create?='T')? ('Read' ':' read?='T')? ('Update' ':' update?='T')? ('Delete' ':'
		//	delete?='T')? ('All' ':' all?='T')?;
		@Override public ParserRule getRule() { return rule; }
		
		//{AssetRel} 'AssetRel' ('Create' ':' create?='T')? ('Read' ':' read?='T')? ('Update' ':' update?='T')? ('Delete' ':'
		//delete?='T')? ('All' ':' all?='T')?
		public Group getGroup() { return cGroup; }
		
		//{AssetRel}
		public Action getAssetRelAction_0() { return cAssetRelAction_0; }
		
		//'AssetRel'
		public Keyword getAssetRelKeyword_1() { return cAssetRelKeyword_1; }
		
		//('Create' ':' create?='T')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'Create'
		public Keyword getCreateKeyword_2_0() { return cCreateKeyword_2_0; }
		
		//':'
		public Keyword getColonKeyword_2_1() { return cColonKeyword_2_1; }
		
		//create?='T'
		public Assignment getCreateAssignment_2_2() { return cCreateAssignment_2_2; }
		
		//'T'
		public Keyword getCreateTKeyword_2_2_0() { return cCreateTKeyword_2_2_0; }
		
		//('Read' ':' read?='T')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'Read'
		public Keyword getReadKeyword_3_0() { return cReadKeyword_3_0; }
		
		//':'
		public Keyword getColonKeyword_3_1() { return cColonKeyword_3_1; }
		
		//read?='T'
		public Assignment getReadAssignment_3_2() { return cReadAssignment_3_2; }
		
		//'T'
		public Keyword getReadTKeyword_3_2_0() { return cReadTKeyword_3_2_0; }
		
		//('Update' ':' update?='T')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'Update'
		public Keyword getUpdateKeyword_4_0() { return cUpdateKeyword_4_0; }
		
		//':'
		public Keyword getColonKeyword_4_1() { return cColonKeyword_4_1; }
		
		//update?='T'
		public Assignment getUpdateAssignment_4_2() { return cUpdateAssignment_4_2; }
		
		//'T'
		public Keyword getUpdateTKeyword_4_2_0() { return cUpdateTKeyword_4_2_0; }
		
		//('Delete' ':' delete?='T')?
		public Group getGroup_5() { return cGroup_5; }
		
		//'Delete'
		public Keyword getDeleteKeyword_5_0() { return cDeleteKeyword_5_0; }
		
		//':'
		public Keyword getColonKeyword_5_1() { return cColonKeyword_5_1; }
		
		//delete?='T'
		public Assignment getDeleteAssignment_5_2() { return cDeleteAssignment_5_2; }
		
		//'T'
		public Keyword getDeleteTKeyword_5_2_0() { return cDeleteTKeyword_5_2_0; }
		
		//('All' ':' all?='T')?
		public Group getGroup_6() { return cGroup_6; }
		
		//'All'
		public Keyword getAllKeyword_6_0() { return cAllKeyword_6_0; }
		
		//':'
		public Keyword getColonKeyword_6_1() { return cColonKeyword_6_1; }
		
		//all?='T'
		public Assignment getAllAssignment_6_2() { return cAllAssignment_6_2; }
		
		//'T'
		public Keyword getAllTKeyword_6_2_0() { return cAllTKeyword_6_2_0; }
	}
	
	public class TargetPlatformElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.sctest.scdsl.SCDsl.TargetPlatform");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cIBMEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cIBMIBMKeyword_0_0 = (Keyword)cIBMEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cAzureEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cAzureAzureKeyword_1_0 = (Keyword)cAzureEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cSolidityEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cSoliditySolidityKeyword_2_0 = (Keyword)cSolidityEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum TargetPlatform:
		//	IBM
		//	| Azure
		//	| Solidity;
		public EnumRule getRule() { return rule; }
		
		//IBM | Azure | Solidity
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IBM
		public EnumLiteralDeclaration getIBMEnumLiteralDeclaration_0() { return cIBMEnumLiteralDeclaration_0; }
		
		//"IBM"
		public Keyword getIBMIBMKeyword_0_0() { return cIBMIBMKeyword_0_0; }
		
		//Azure
		public EnumLiteralDeclaration getAzureEnumLiteralDeclaration_1() { return cAzureEnumLiteralDeclaration_1; }
		
		//"Azure"
		public Keyword getAzureAzureKeyword_1_0() { return cAzureAzureKeyword_1_0; }
		
		//Solidity
		public EnumLiteralDeclaration getSolidityEnumLiteralDeclaration_2() { return cSolidityEnumLiteralDeclaration_2; }
		
		//"Solidity"
		public Keyword getSoliditySolidityKeyword_2_0() { return cSoliditySolidityKeyword_2_0; }
	}
	public class ParTypeElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.sctest.scdsl.SCDsl.ParType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cStringEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cStringStringKeyword_0_0 = (Keyword)cStringEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cIntegerEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cIntegerIntegerKeyword_1_0 = (Keyword)cIntegerEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cLongEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cLongLongKeyword_2_0 = (Keyword)cLongEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cDoubleEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cDoubleDoubleKeyword_3_0 = (Keyword)cDoubleEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cDatetimeEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cDatetimeDatetimeKeyword_4_0 = (Keyword)cDatetimeEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cBooleanEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cBooleanBooleanKeyword_5_0 = (Keyword)cBooleanEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cAddressEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cAddressAddressKeyword_6_0 = (Keyword)cAddressEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cArrayEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cArrayArrayKeyword_7_0 = (Keyword)cArrayEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cContractEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cContractContractKeyword_8_0 = (Keyword)cContractEnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cMoneyEnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cMoneyMoneyKeyword_9_0 = (Keyword)cMoneyEnumLiteralDeclaration_9.eContents().get(0);
		private final EnumLiteralDeclaration cStateEnumLiteralDeclaration_10 = (EnumLiteralDeclaration)cAlternatives.eContents().get(10);
		private final Keyword cStateStateKeyword_10_0 = (Keyword)cStateEnumLiteralDeclaration_10.eContents().get(0);
		private final EnumLiteralDeclaration cMappingEnumLiteralDeclaration_11 = (EnumLiteralDeclaration)cAlternatives.eContents().get(11);
		private final Keyword cMappingMappingKeyword_11_0 = (Keyword)cMappingEnumLiteralDeclaration_11.eContents().get(0);
		
		//enum ParType:
		//	string
		//	| integer
		//	| long
		//	| double
		//	| datetime
		//	| boolean
		//	| address
		//	| array
		//	| contract
		//	| money
		//	| state
		//	| mapping;
		public EnumRule getRule() { return rule; }
		
		//string | integer | long | double | datetime | boolean | address | array | contract | money | state | mapping
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//string
		public EnumLiteralDeclaration getStringEnumLiteralDeclaration_0() { return cStringEnumLiteralDeclaration_0; }
		
		//"string"
		public Keyword getStringStringKeyword_0_0() { return cStringStringKeyword_0_0; }
		
		//integer
		public EnumLiteralDeclaration getIntegerEnumLiteralDeclaration_1() { return cIntegerEnumLiteralDeclaration_1; }
		
		//"integer"
		public Keyword getIntegerIntegerKeyword_1_0() { return cIntegerIntegerKeyword_1_0; }
		
		//long
		public EnumLiteralDeclaration getLongEnumLiteralDeclaration_2() { return cLongEnumLiteralDeclaration_2; }
		
		//"long"
		public Keyword getLongLongKeyword_2_0() { return cLongLongKeyword_2_0; }
		
		//double
		public EnumLiteralDeclaration getDoubleEnumLiteralDeclaration_3() { return cDoubleEnumLiteralDeclaration_3; }
		
		//"double"
		public Keyword getDoubleDoubleKeyword_3_0() { return cDoubleDoubleKeyword_3_0; }
		
		//datetime
		public EnumLiteralDeclaration getDatetimeEnumLiteralDeclaration_4() { return cDatetimeEnumLiteralDeclaration_4; }
		
		//"datetime"
		public Keyword getDatetimeDatetimeKeyword_4_0() { return cDatetimeDatetimeKeyword_4_0; }
		
		//boolean
		public EnumLiteralDeclaration getBooleanEnumLiteralDeclaration_5() { return cBooleanEnumLiteralDeclaration_5; }
		
		//"boolean"
		public Keyword getBooleanBooleanKeyword_5_0() { return cBooleanBooleanKeyword_5_0; }
		
		//address
		public EnumLiteralDeclaration getAddressEnumLiteralDeclaration_6() { return cAddressEnumLiteralDeclaration_6; }
		
		//"address"
		public Keyword getAddressAddressKeyword_6_0() { return cAddressAddressKeyword_6_0; }
		
		//array
		public EnumLiteralDeclaration getArrayEnumLiteralDeclaration_7() { return cArrayEnumLiteralDeclaration_7; }
		
		//"array"
		public Keyword getArrayArrayKeyword_7_0() { return cArrayArrayKeyword_7_0; }
		
		//contract
		public EnumLiteralDeclaration getContractEnumLiteralDeclaration_8() { return cContractEnumLiteralDeclaration_8; }
		
		//"contract"
		public Keyword getContractContractKeyword_8_0() { return cContractContractKeyword_8_0; }
		
		//money
		public EnumLiteralDeclaration getMoneyEnumLiteralDeclaration_9() { return cMoneyEnumLiteralDeclaration_9; }
		
		//"money"
		public Keyword getMoneyMoneyKeyword_9_0() { return cMoneyMoneyKeyword_9_0; }
		
		//state
		public EnumLiteralDeclaration getStateEnumLiteralDeclaration_10() { return cStateEnumLiteralDeclaration_10; }
		
		//"state"
		public Keyword getStateStateKeyword_10_0() { return cStateStateKeyword_10_0; }
		
		//mapping
		public EnumLiteralDeclaration getMappingEnumLiteralDeclaration_11() { return cMappingEnumLiteralDeclaration_11; }
		
		//"mapping"
		public Keyword getMappingMappingKeyword_11_0() { return cMappingMappingKeyword_11_0; }
	}
	public class ConditionTypesElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.sctest.scdsl.SCDsl.ConditionTypes");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPreEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPrePreKeyword_0_0 = (Keyword)cPreEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cPostEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cPostPostKeyword_1_0 = (Keyword)cPostEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum ConditionTypes:
		//	Pre
		//	| Post;
		public EnumRule getRule() { return rule; }
		
		//Pre | Post
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Pre
		public EnumLiteralDeclaration getPreEnumLiteralDeclaration_0() { return cPreEnumLiteralDeclaration_0; }
		
		//"Pre"
		public Keyword getPrePreKeyword_0_0() { return cPrePreKeyword_0_0; }
		
		//Post
		public EnumLiteralDeclaration getPostEnumLiteralDeclaration_1() { return cPostEnumLiteralDeclaration_1; }
		
		//"Post"
		public Keyword getPostPostKeyword_1_0() { return cPostPostKeyword_1_0; }
	}
	
	private final SContractElements pSContract;
	private final TargetPlatformElements eTargetPlatform;
	private final ParTypeElements eParType;
	private final ConditionTypesElements eConditionTypes;
	private final ElementElements pElement;
	private final CompositeElementElements pCompositeElement;
	private final ParticipantElements pParticipant;
	private final AssetElements pAsset;
	private final ParameterElements pParameter;
	private final TransactionElements pTransaction;
	private final ConditionElements pCondition;
	private final RelationshipElements pRelationship;
	private final EventElements pEvent;
	private final TranRelElements pTranRel;
	private final AssetRelElements pAssetRel;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public SCDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pSContract = new SContractElements();
		this.eTargetPlatform = new TargetPlatformElements();
		this.eParType = new ParTypeElements();
		this.eConditionTypes = new ConditionTypesElements();
		this.pElement = new ElementElements();
		this.pCompositeElement = new CompositeElementElements();
		this.pParticipant = new ParticipantElements();
		this.pAsset = new AssetElements();
		this.pParameter = new ParameterElements();
		this.pTransaction = new TransactionElements();
		this.pCondition = new ConditionElements();
		this.pRelationship = new RelationshipElements();
		this.pEvent = new EventElements();
		this.pTranRel = new TranRelElements();
		this.pAssetRel = new AssetRelElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.sctest.scdsl.SCDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//SContract:
	//	'Contract' ':' name=ID
	//	'Platform' ':' platform=TargetPlatform
	//	element+=Element*;
	public SContractElements getSContractAccess() {
		return pSContract;
	}
	
	public ParserRule getSContractRule() {
		return getSContractAccess().getRule();
	}
	
	//enum TargetPlatform:
	//	IBM
	//	| Azure
	//	| Solidity;
	public TargetPlatformElements getTargetPlatformAccess() {
		return eTargetPlatform;
	}
	
	public EnumRule getTargetPlatformRule() {
		return getTargetPlatformAccess().getRule();
	}
	
	//enum ParType:
	//	string
	//	| integer
	//	| long
	//	| double
	//	| datetime
	//	| boolean
	//	| address
	//	| array
	//	| contract
	//	| money
	//	| state
	//	| mapping;
	public ParTypeElements getParTypeAccess() {
		return eParType;
	}
	
	public EnumRule getParTypeRule() {
		return getParTypeAccess().getRule();
	}
	
	//enum ConditionTypes:
	//	Pre
	//	| Post;
	public ConditionTypesElements getConditionTypesAccess() {
		return eConditionTypes;
	}
	
	public EnumRule getConditionTypesRule() {
		return getConditionTypesAccess().getRule();
	}
	
	//Element:
	//	(Participant | Asset | Transaction) '{'
	//	'Name' ':' name=ID
	//	'List' ':' list=ID
	//	relationship+=Relationship*
	//	compositeelement+=CompositeElement*
	//	parameters+=Parameter*
	//	'}';
	public ElementElements getElementAccess() {
		return pElement;
	}
	
	public ParserRule getElementRule() {
		return getElementAccess().getRule();
	}
	
	//CompositeElement:
	//	'Name' ':' name=ID
	//	'List' ':' list=ID;
	public CompositeElementElements getCompositeElementAccess() {
		return pCompositeElement;
	}
	
	public ParserRule getCompositeElementRule() {
		return getCompositeElementAccess().getRule();
	}
	
	//Participant:
	//	{Participant} 'Participant' ('Creator' ':' creator?='T')?;
	public ParticipantElements getParticipantAccess() {
		return pParticipant;
	}
	
	public ParserRule getParticipantRule() {
		return getParticipantAccess().getRule();
	}
	
	//Asset:
	//	'Asset'
	//	'Type' ':' type=ID;
	public AssetElements getAssetAccess() {
		return pAsset;
	}
	
	public ParserRule getAssetRule() {
		return getAssetAccess().getRule();
	}
	
	//Parameter:
	//	'Parameter' '{'
	//	'Name' ':' name=ID
	//	'Type' ':' type=ID ('Identifier' ':' identifier?='T')?
	//	'}';
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}
	
	//Transaction:
	//	{Transaction} 'Transaction' ('Mostrar' ':' mostrar?='T')? '{'
	//	condition+=Condition*
	//	'}';
	public TransactionElements getTransactionAccess() {
		return pTransaction;
	}
	
	public ParserRule getTransactionRule() {
		return getTransactionAccess().getRule();
	}
	
	//Condition:
	//	'Condition' '{'
	//	'Name' ':' name=ID
	//	'Condition' ':' condition=ID
	//	'ConditionType' ':' conditionType=ConditionTypes
	//	'}';
	public ConditionElements getConditionAccess() {
		return pCondition;
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}
	
	//Relationship:
	//	'Relationship' (TranRel | AssetRel) '{'
	//	'Name' ':' name=ID
	//	'From' ':' from=[Element]
	//	'To' ':' to=[Element] event+=Event*
	//	'}';
	public RelationshipElements getRelationshipAccess() {
		return pRelationship;
	}
	
	public ParserRule getRelationshipRule() {
		return getRelationshipAccess().getRule();
	}
	
	//Event:
	//	'Event' '{'
	//	'Description' ':' description=ID
	//	'Name' ':' name=ID
	//	'}';
	public EventElements getEventAccess() {
		return pEvent;
	}
	
	public ParserRule getEventRule() {
		return getEventAccess().getRule();
	}
	
	//TranRel:
	//	{TranRel} 'TranRel' ('Selected' ':' selected?='T')?;
	public TranRelElements getTranRelAccess() {
		return pTranRel;
	}
	
	public ParserRule getTranRelRule() {
		return getTranRelAccess().getRule();
	}
	
	//AssetRel:
	//	{AssetRel} 'AssetRel' ('Create' ':' create?='T')? ('Read' ':' read?='T')? ('Update' ':' update?='T')? ('Delete' ':'
	//	delete?='T')? ('All' ':' all?='T')?;
	public AssetRelElements getAssetRelAccess() {
		return pAssetRel;
	}
	
	public ParserRule getAssetRelRule() {
		return getAssetRelAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
